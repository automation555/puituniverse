the super awsum wurklist
---------------------------
[x] rectangle class for player position + size = boundingbox
[x] player to level collision detection
[x] debug player to level coldec: count pixels, make half of the landscape flat
[x] add bullet class
[x] shoot
[x] duplicate player for (static for now) enemy class
[x] enemies shouldn't kill themselves
[x] add animation to player class
[x] add death animation (corpse class)
[x] team colors (subclass of animation class that changes key colours)
[x] add mini AI (move, stop, shoot (and repeat)
[x] track score
[x] add blood/particle class w/ simple physics (ground slide, don't hit other blood)
[x] make level bigger
[x] optimize level drawing: only what's on screen
[x] color shots
[x] add sound (8bit betty, sound effects)
[x] equipment: parachutes (when spawning too high and parachute item == 1)
[x] REFACTOR: every new object generates a new texture - is this madness right? better now.
[x] add highscore file
[x] add position offset to animations http://docs.python.org/lib/module-ConfigParser.html
[x] highscore tracking
[x] decouple equipment graphic (gun) from character graphic (running / standing / jumping)
[x] minigun equipment
[x] add scrolling (put draw() method in gamestate, add scroll offset) - really stupid scrolling
[x] solve the onground problem
[x] only jump once
[x] setting the gameobject velocity on the ground to -2 creates a problem with position calculation during tick()
[x] font rendering - start / exit game in menu
[x] menu
[x] multi coloured fonts
[x] pause (Arcade())
[x] display highscore in menu
[x] display score & fps in game
[x] configurable controls
[x] show object count besides fps
[x] minigun extra item
[x] spawnarea class spawns items
[x] two player controls
[x] arcade mode with spawnareas
[x] corpses absorb bullets (like in metal slug)
[x] found out that current level drawing sucks up 30 fps
[x] limit gameplay to 30fps (should be enough, supports up to 70 objects before drops below)
[x] generate level texture for drawing - gain 30fps
[x] switch to menu when dead
[x] arcade -> limit scrollarea
[x] shooting when on parachute switches to gun (metal slug like behaviour)
[x] nex just trippled the performance by killing dir() - awsum!!!!
[x] added nex' improved AIplayer ('single help') in main menu
[x] performance: level: render to texture and use that
[x] png based levels
[x] limit scrollarea in arcade to level size
[x] increase enemy spawn rate by x frames al y kills (experiment)
[x] spawn ammo all 30 kills

[ ] crouch
[ ] minigun has limited ammo
[ ] cpuAI wie aufm zettel
[ ] enemies drop hats for fun and profit
[ ] shoot eyecandy (flash)
[ ] arcade mode: see paper
[ ] grenades (new button)

[ ] customize player (colour, name)
[ ] players in highscore list
[ ] shot delay (minigun, normal gun)
[ ] grenades
[ ] make ai jump when a shot is nearby and standing
[x] duck/prone
[ ] better blood particle spawn options (like pixelwar animation - cos()?)
[ ] track global kills for player
[ ] gamepad controls
[ ] online highscore
[ ] make blood colour the landscape
[ ] level editor: Indeed, more sandbox modes. Lemme pile up cars and explode them to make a rocket to the moon. - ingame editor. place objects n stuff
[x] increase performance
[ ] increase performance some more
[ ] animation - don't draw what isn't on screen!!!
    ## this would be trivial to implement if we could simply draw everything
    ## that intersects with the scrollarea. however, this isn't quite possible
    ## yet. for example, the sidekick (or also a player, currently) may be off
    ## the screen, but we still need to call its draw method because it's also
    ## responsible for rendering its score display. the simplest solution is
    ## to go through the code and make sure each draw method really only needs
    ## to be called when the bounding box of its respective object intersects
    ## with the screen. hence this new to-do item:
[ ] disentangle rendering code so drawing methods only need to be called     when the bounding box of the respective object intersects the screen
[ ] bullets only fly 1 1/2 screens far
[ ] hats & customization options
[ ] knife (slash animation when standing "over a player", stop when shooting again)
[ ] animation system w/ draw order? sprites.add('gun.png') sprite.set_animation() sprite.move etc
      --> could be used to minimize texture switching -----> bullets always on top
[ ] complex particle behaviour (hit ground -> slide, hit other blood -> stop and make other blood move (random speed in certain range to create bouncy physics). if other can't move (blocked), don't make it, on top of blood / sliding: try to make the bottom one move (slower range than when hitting from side))
[ ] make puit.states hierarchial
[x] make scrolling smarter
[ ] use settings.ini (or some other way of saving configuration) more (get all 'magic numbers' out of the code!)
[x] de-glitch-ify key controls
[x] fix bug: i run faster to the left than to the right, WTF?    
[ ] use yaml for config files
[x] particles not in collideable object tree = performance!!!
[ ] objects that test for collisions (bullets) suck up tremendous ammounts of performance - kill them asap & sort objects for collision detection sweep test and/or use pynumeric (boundingbox.intersects())
[X] add performance measure - tick() took X draw() took Y (solution: use the -p option. uncheck this item again if you want something more elaborate :-)
[ ] try how psyco affects performance now